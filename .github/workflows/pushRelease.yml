# Workflow to build and deploy to Azure cloud the License Server UI  

name: Push Release

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release Version'
        required: true
        default: 'latest'

jobs:
  build:
      runs-on: ubuntu-latest
      steps:
        # - name: Install Zip
        #   uses: montudor/action-zip@v1
        - name: Download artifact
          uses: dawidd6/action-download-artifact@v2
          with:
            github_token: ${{secrets.GITHUB_TOKEN}}
            workflow: main.yml
            name: prod-released-version
            workflow_conclusion: success        
        
        - name: List release version
          id: release-version
          run: |
            ls
            cat ./ReleaseVersion.txt
            echo '::set-output name=version::$(cat ./ReleaseVersion.txt | cut -d "-" -f2-)'
        
        - name: print release version
          run: |
            echo ${{ steps.release-version.outputs.version }}
        
        - name: Retrieve release assets
          uses: dsaltares/fetch-gh-release-asset@master
          with:
            version: '${{ steps.release-version.outputs.version }}'
            regex: true
            file: "LS"
            target: "./"
        
        - name: List content
          run: |
            ls
        # - name: Retrieve release assets
        #   id: release_download
        #   uses: dsaltares/fetch-gh-release-asset@master
        #   with:
        #     version: '${{ github.event.inputs.release_version }}'
        #     regex: true
        #     file: "LS"
        #     target: "./"
        
        # - name: Unzip Release Folder
        #   run: unzip -qq *.zip -d Release
        
        # - name: Check if file is present
        #   run: |
        #     cd Release
        #     ls
      
        # - name: Unzip Integration UI
        #   run: unzip -qq integration*.zip -d Integration-build
        #   working-directory: Release

        # - name: Check if file is present
        #   run: |
        #     cd Release/Integration-build/actions-test
        #     echo "Released ${{ steps.release_download.outputs.version }} Build" > Build.txt
        #     ls
        #     cat Build.txt
        
        # - name: Print deployed Release Version
        #   run: echo 'Released ${{ steps.release_download.outputs.version }} Build'